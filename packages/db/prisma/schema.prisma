datasource db {
  provider = "postgresql"
  url      = "postgresql://spoontify-chat_owner:npg_cDNJ9aZGXq4M@ep-twilight-tooth-a4u1h1h6.us-east-1.aws.neon.tech/spoontify-chat?sslmode=require"
}
generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}
model User {
  id                  String   @id @default(uuid())
  name                String
  email               String?  @unique
  phone               String?  
  password            String?
  spotifyId           String?  @unique
  spotifyName         String?
  spotifyEmail        String?
  premium             Boolean  @default(false)
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  tokenExpiresAt      DateTime?  
  ownedRooms          Room[]           @relation("RoomOwner")
  participatedRooms   RoomParticipant[]
  addedQueueEntries   QueueEntry[] 
  chatMessages        ChatMessage[] 
  createdPolls        Poll[]          
  votedPolls          PollVote[]       
  @@index([email])
  @@index([spotifyId])
}
model Room {
  id           String   @id @default(uuid())
  roomCode     String   @unique
  ownerId      String
  currentTrackIndex Int? @default(0)
  owner        User     @relation("RoomOwner", fields: [ownerId], references: [id])
  participants RoomParticipant[]
  queue        QueueEntry[]
  chat         ChatMessage[]
  polls        Poll[]
  createdAt    DateTime @default(now())  
  @@index([roomCode])
}
model RoomParticipant {
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id])
  room   Room   @relation(fields: [roomId], references: [id])  
  @@id([userId, roomId])
  @@index([userId])
  @@index([roomId])
}
model QueueEntry {
  id         String   @id @default(uuid())
  roomId     String
  trackId    String   // Spotify track ID
  songName   String   // Song name
  artistName Json   // Primary artist name (could be a JSON array if multiple)
  albumName  String   // Album name
  imageUrl   String? @db.VarChar(2048)  // URL to album art/song picture
  addedById  String
  position   Int      // Order in the queue  
  durationMs    Int?
  room       Room     @relation(fields: [roomId], references: [id])
  addedBy    User     @relation(fields: [addedById], references: [id])  
  @@unique([roomId, position])
  @@index([roomId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String?
  imageUrl  String?  @db.VarChar(2048)  // New field for image URL
  userId    String
  roomId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  @@index([roomId])
  @@index([userId])
}

model Poll {
  id            String      @id @default(uuid())
  roomId        String
  trackId       String      // Spotify track ID
  songName      String
  artistName    Json        // Primary artist name (could be a JSON array if multiple)
  albumName     String
  imageUrl      String?     @db.VarChar(2048)
  createdById   String
  createdAt     DateTime    @default(now())
  closed        Boolean     @default(false)
  room          Room        @relation(fields: [roomId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])
  votes         PollVote[]
  @@index([roomId])
  @@index([createdById])
}

model PollVote {
  id        String   @id @default(uuid())
  pollId    String
  userId    String
  vote      Boolean  // true for Yes, false for No
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  @@unique([pollId, userId]) // Prevent multiple votes from the same user
  @@index([pollId])
  @@index([userId])
}